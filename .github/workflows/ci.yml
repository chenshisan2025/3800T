name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  FLUTTER_VERSION: '3.16.0'

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma client
      run: pnpm db:generate

    - name: Run linting
      run: pnpm lint

    - name: Run type checking
      run: pnpm type-check

    - name: Run tests
      run: pnpm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run test coverage
      run: pnpm test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Flutter 移动端测试
  flutter-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: Get Flutter dependencies
      run: |
        cd apps/mobile
        flutter pub get

    - name: Run Flutter analyzer
      run: |
        cd apps/mobile
        flutter analyze

    - name: Run Flutter tests
      run: |
        cd apps/mobile
        flutter test --coverage

    - name: Upload Flutter coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/mobile/coverage/lcov.info
        flags: flutter
        name: flutter-coverage

  # 构建测试
  build-test:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma client
      run: pnpm db:generate

    - name: Build shared SDK
      run: pnpm build:shared

    - name: Build API service
      run: pnpm build:api

    - name: Build Admin panel
      run: pnpm build:admin

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          apps/admin/.next
          services/api/dist
          packages/shared-sdk/dist

  # Docker 构建测试
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: api
        push: false
        tags: gulingtong-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Admin Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: admin
        push: false
        tags: gulingtong-admin:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [lint-and-test, flutter-test, build-test, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: api
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/gulingtong-api:dev
          ${{ secrets.REGISTRY_URL }}/gulingtong-api:dev-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Admin image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: admin
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/gulingtong-admin:dev
          ${{ secrets.REGISTRY_URL }}/gulingtong-admin:dev-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to development
      run: |
        echo "Deploying to development environment..."
        # 这里添加实际的部署脚本
        # 例如：kubectl apply -f k8s/dev/ 或者调用部署 API

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [lint-and-test, flutter-test, build-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: api
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/gulingtong-api:latest
          ${{ secrets.REGISTRY_URL }}/gulingtong-api:prod-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Admin image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: admin
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/gulingtong-admin:latest
          ${{ secrets.REGISTRY_URL }}/gulingtong-admin:prod-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里添加实际的生产部署脚本
        # 例如：kubectl apply -f k8s/prod/ 或者调用部署 API

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          自动发布版本 v${{ github.run_number }}
          
          提交: ${{ github.sha }}
          分支: ${{ github.ref }}
          
          更新内容请查看提交历史。
        draft: false
        prerelease: false