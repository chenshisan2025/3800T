/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AiReportListResponse,
  AiReportResponse,
  ReportType,
} from '../models/index';
import {
    AiReportListResponseFromJSON,
    AiReportListResponseToJSON,
    AiReportResponseFromJSON,
    AiReportResponseToJSON,
    ReportTypeFromJSON,
    ReportTypeToJSON,
} from '../models/index';

export interface ApiAiReportsGetRequest {
    page?: number;
    limit?: number;
    stockCode?: string;
    reportType?: ReportType;
}

export interface ApiAiReportsIdGetRequest {
    id: number;
}

/**
 * 
 */
export class AIReportsApi extends runtime.BaseAPI {

    /**
     * 分页获取 AI 投资分析报告
     * 获取 AI 报告列表
     */
    async apiAiReportsGetRaw(requestParameters: ApiAiReportsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AiReportListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['stockCode'] != null) {
            queryParameters['stock_code'] = requestParameters['stockCode'];
        }

        if (requestParameters['reportType'] != null) {
            queryParameters['report_type'] = requestParameters['reportType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/ai/reports`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AiReportListResponseFromJSON(jsonValue));
    }

    /**
     * 分页获取 AI 投资分析报告
     * 获取 AI 报告列表
     */
    async apiAiReportsGet(requestParameters: ApiAiReportsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AiReportListResponse> {
        const response = await this.apiAiReportsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定 AI 报告的详细内容
     * 获取 AI 报告详情
     */
    async apiAiReportsIdGetRaw(requestParameters: ApiAiReportsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AiReportResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAiReportsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/ai/reports/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AiReportResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定 AI 报告的详细内容
     * 获取 AI 报告详情
     */
    async apiAiReportsIdGet(requestParameters: ApiAiReportsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AiReportResponse> {
        const response = await this.apiAiReportsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
