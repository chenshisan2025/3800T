/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlertListResponse,
  AlertResponse,
  CreateAlertRequest,
  ErrorResponse,
  SuccessResponse,
  UpdateAlertRequest,
} from '../models/index';
import {
    AlertListResponseFromJSON,
    AlertListResponseToJSON,
    AlertResponseFromJSON,
    AlertResponseToJSON,
    CreateAlertRequestFromJSON,
    CreateAlertRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateAlertRequestFromJSON,
    UpdateAlertRequestToJSON,
} from '../models/index';

export interface ApiAlertsDeleteRequest {
    id: number;
}

export interface ApiAlertsGetRequest {
    watchlistId?: number;
    stockSymbol?: string;
    isActive?: boolean;
}

export interface ApiAlertsPostRequest {
    createAlertRequest: CreateAlertRequest;
}

export interface ApiAlertsPutRequest {
    updateAlertRequest: UpdateAlertRequest;
}

/**
 * 
 */
export class AlertsApi extends runtime.BaseAPI {

    /**
     * 删除指定的价格提醒规则
     * 删除提醒规则
     */
    async apiAlertsDeleteRaw(requestParameters: ApiAlertsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAlertsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/alerts`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 删除指定的价格提醒规则
     * 删除提醒规则
     */
    async apiAlertsDelete(requestParameters: ApiAlertsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAlertsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取当前用户的价格提醒规则
     * 获取提醒规则列表
     */
    async apiAlertsGetRaw(requestParameters: ApiAlertsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['watchlistId'] != null) {
            queryParameters['watchlistId'] = requestParameters['watchlistId'];
        }

        if (requestParameters['stockSymbol'] != null) {
            queryParameters['stockSymbol'] = requestParameters['stockSymbol'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/alerts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertListResponseFromJSON(jsonValue));
    }

    /**
     * 获取当前用户的价格提醒规则
     * 获取提醒规则列表
     */
    async apiAlertsGet(requestParameters: ApiAlertsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertListResponse> {
        const response = await this.apiAlertsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 为自选股创建价格提醒规则
     * 创建提醒规则
     */
    async apiAlertsPostRaw(requestParameters: ApiAlertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertResponse>> {
        if (requestParameters['createAlertRequest'] == null) {
            throw new runtime.RequiredError(
                'createAlertRequest',
                'Required parameter "createAlertRequest" was null or undefined when calling apiAlertsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/alerts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAlertRequestToJSON(requestParameters['createAlertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertResponseFromJSON(jsonValue));
    }

    /**
     * 为自选股创建价格提醒规则
     * 创建提醒规则
     */
    async apiAlertsPost(requestParameters: ApiAlertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertResponse> {
        const response = await this.apiAlertsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新现有的价格提醒规则
     * 更新提醒规则
     */
    async apiAlertsPutRaw(requestParameters: ApiAlertsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertResponse>> {
        if (requestParameters['updateAlertRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAlertRequest',
                'Required parameter "updateAlertRequest" was null or undefined when calling apiAlertsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/alerts`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAlertRequestToJSON(requestParameters['updateAlertRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertResponseFromJSON(jsonValue));
    }

    /**
     * 更新现有的价格提醒规则
     * 更新提醒规则
     */
    async apiAlertsPut(requestParameters: ApiAlertsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertResponse> {
        const response = await this.apiAlertsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
