/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPortfolioItemRequest,
  CreatePortfolioRequest,
  PortfolioDetailResponse,
  PortfolioItemListResponse,
  PortfolioItemResponse,
  PortfolioListResponse,
  PortfolioResponse,
  SuccessResponse,
  UpdatePortfolioItemRequest,
  UpdatePortfolioRequest,
} from '../models/index';
import {
    AddPortfolioItemRequestFromJSON,
    AddPortfolioItemRequestToJSON,
    CreatePortfolioRequestFromJSON,
    CreatePortfolioRequestToJSON,
    PortfolioDetailResponseFromJSON,
    PortfolioDetailResponseToJSON,
    PortfolioItemListResponseFromJSON,
    PortfolioItemListResponseToJSON,
    PortfolioItemResponseFromJSON,
    PortfolioItemResponseToJSON,
    PortfolioListResponseFromJSON,
    PortfolioListResponseToJSON,
    PortfolioResponseFromJSON,
    PortfolioResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdatePortfolioItemRequestFromJSON,
    UpdatePortfolioItemRequestToJSON,
    UpdatePortfolioRequestFromJSON,
    UpdatePortfolioRequestToJSON,
} from '../models/index';

export interface ApiUsersPortfolioIdDeleteRequest {
    id: number;
}

export interface ApiUsersPortfolioIdGetRequest {
    id: number;
}

export interface ApiUsersPortfolioIdItemsGetRequest {
    id: number;
}

export interface ApiUsersPortfolioIdItemsItemIdDeleteRequest {
    id: number;
    itemId: number;
}

export interface ApiUsersPortfolioIdItemsItemIdGetRequest {
    id: number;
    itemId: number;
}

export interface ApiUsersPortfolioIdItemsItemIdPutRequest {
    id: number;
    itemId: number;
    updatePortfolioItemRequest: UpdatePortfolioItemRequest;
}

export interface ApiUsersPortfolioIdItemsPostRequest {
    id: number;
    addPortfolioItemRequest: AddPortfolioItemRequest;
}

export interface ApiUsersPortfolioIdPutRequest {
    id: number;
    updatePortfolioRequest: UpdatePortfolioRequest;
}

export interface ApiUsersPortfolioPostRequest {
    createPortfolioRequest: CreatePortfolioRequest;
}

/**
 * 
 */
export class PortfolioApi extends runtime.BaseAPI {

    /**
     * 获取当前用户的投资组合列表
     * 获取投资组合列表
     */
    async apiUsersPortfolioGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioListResponseFromJSON(jsonValue));
    }

    /**
     * 获取当前用户的投资组合列表
     * 获取投资组合列表
     */
    async apiUsersPortfolioGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioListResponse> {
        const response = await this.apiUsersPortfolioGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 删除指定投资组合及其所有持仓
     * 删除投资组合
     */
    async apiUsersPortfolioIdDeleteRaw(requestParameters: ApiUsersPortfolioIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersPortfolioIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 删除指定投资组合及其所有持仓
     * 删除投资组合
     */
    async apiUsersPortfolioIdDelete(requestParameters: ApiUsersPortfolioIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiUsersPortfolioIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定投资组合的详细信息和统计数据
     * 获取投资组合详情
     */
    async apiUsersPortfolioIdGetRaw(requestParameters: ApiUsersPortfolioIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersPortfolioIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioDetailResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定投资组合的详细信息和统计数据
     * 获取投资组合详情
     */
    async apiUsersPortfolioIdGet(requestParameters: ApiUsersPortfolioIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDetailResponse> {
        const response = await this.apiUsersPortfolioIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取投资组合的持仓项目列表
     * 获取持仓列表
     */
    async apiUsersPortfolioIdItemsGetRaw(requestParameters: ApiUsersPortfolioIdItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioItemListResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersPortfolioIdItemsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio/{id}/items`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioItemListResponseFromJSON(jsonValue));
    }

    /**
     * 获取投资组合的持仓项目列表
     * 获取持仓列表
     */
    async apiUsersPortfolioIdItemsGet(requestParameters: ApiUsersPortfolioIdItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioItemListResponse> {
        const response = await this.apiUsersPortfolioIdItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 从投资组合中删除持仓项目
     * 删除持仓
     */
    async apiUsersPortfolioIdItemsItemIdDeleteRaw(requestParameters: ApiUsersPortfolioIdItemsItemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersPortfolioIdItemsItemIdDelete().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiUsersPortfolioIdItemsItemIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio/{id}/items/{itemId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 从投资组合中删除持仓项目
     * 删除持仓
     */
    async apiUsersPortfolioIdItemsItemIdDelete(requestParameters: ApiUsersPortfolioIdItemsItemIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiUsersPortfolioIdItemsItemIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定持仓项目的详细信息
     * 获取持仓详情
     */
    async apiUsersPortfolioIdItemsItemIdGetRaw(requestParameters: ApiUsersPortfolioIdItemsItemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioItemResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersPortfolioIdItemsItemIdGet().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiUsersPortfolioIdItemsItemIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio/{id}/items/{itemId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioItemResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定持仓项目的详细信息
     * 获取持仓详情
     */
    async apiUsersPortfolioIdItemsItemIdGet(requestParameters: ApiUsersPortfolioIdItemsItemIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioItemResponse> {
        const response = await this.apiUsersPortfolioIdItemsItemIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新持仓项目的数量和成本
     * 更新持仓
     */
    async apiUsersPortfolioIdItemsItemIdPutRaw(requestParameters: ApiUsersPortfolioIdItemsItemIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioItemResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersPortfolioIdItemsItemIdPut().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling apiUsersPortfolioIdItemsItemIdPut().'
            );
        }

        if (requestParameters['updatePortfolioItemRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePortfolioItemRequest',
                'Required parameter "updatePortfolioItemRequest" was null or undefined when calling apiUsersPortfolioIdItemsItemIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio/{id}/items/{itemId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePortfolioItemRequestToJSON(requestParameters['updatePortfolioItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioItemResponseFromJSON(jsonValue));
    }

    /**
     * 更新持仓项目的数量和成本
     * 更新持仓
     */
    async apiUsersPortfolioIdItemsItemIdPut(requestParameters: ApiUsersPortfolioIdItemsItemIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioItemResponse> {
        const response = await this.apiUsersPortfolioIdItemsItemIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 向投资组合添加新的持仓项目
     * 添加持仓
     */
    async apiUsersPortfolioIdItemsPostRaw(requestParameters: ApiUsersPortfolioIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioItemResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersPortfolioIdItemsPost().'
            );
        }

        if (requestParameters['addPortfolioItemRequest'] == null) {
            throw new runtime.RequiredError(
                'addPortfolioItemRequest',
                'Required parameter "addPortfolioItemRequest" was null or undefined when calling apiUsersPortfolioIdItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio/{id}/items`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPortfolioItemRequestToJSON(requestParameters['addPortfolioItemRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioItemResponseFromJSON(jsonValue));
    }

    /**
     * 向投资组合添加新的持仓项目
     * 添加持仓
     */
    async apiUsersPortfolioIdItemsPost(requestParameters: ApiUsersPortfolioIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioItemResponse> {
        const response = await this.apiUsersPortfolioIdItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新投资组合基本信息
     * 更新投资组合
     */
    async apiUsersPortfolioIdPutRaw(requestParameters: ApiUsersPortfolioIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersPortfolioIdPut().'
            );
        }

        if (requestParameters['updatePortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePortfolioRequest',
                'Required parameter "updatePortfolioRequest" was null or undefined when calling apiUsersPortfolioIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePortfolioRequestToJSON(requestParameters['updatePortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioResponseFromJSON(jsonValue));
    }

    /**
     * 更新投资组合基本信息
     * 更新投资组合
     */
    async apiUsersPortfolioIdPut(requestParameters: ApiUsersPortfolioIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioResponse> {
        const response = await this.apiUsersPortfolioIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建新的投资组合
     * 创建投资组合
     */
    async apiUsersPortfolioPostRaw(requestParameters: ApiUsersPortfolioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioResponse>> {
        if (requestParameters['createPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'createPortfolioRequest',
                'Required parameter "createPortfolioRequest" was null or undefined when calling apiUsersPortfolioPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/portfolio`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePortfolioRequestToJSON(requestParameters['createPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的投资组合
     * 创建投资组合
     */
    async apiUsersPortfolioPost(requestParameters: ApiUsersPortfolioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioResponse> {
        const response = await this.apiUsersPortfolioPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
