/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateStockRequest,
  ErrorResponse,
  StockDataListResponse,
  StockDetailResponse,
  StockListResponse,
  StockMarket,
  StockResponse,
  SuccessResponse,
  UpdateStockRequest,
} from '../models/index';
import {
    CreateStockRequestFromJSON,
    CreateStockRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    StockDataListResponseFromJSON,
    StockDataListResponseToJSON,
    StockDetailResponseFromJSON,
    StockDetailResponseToJSON,
    StockListResponseFromJSON,
    StockListResponseToJSON,
    StockMarketFromJSON,
    StockMarketToJSON,
    StockResponseFromJSON,
    StockResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateStockRequestFromJSON,
    UpdateStockRequestToJSON,
} from '../models/index';

export interface ApiStocksCodeDataGetRequest {
    code: string;
    startDate?: Date;
    endDate?: Date;
    limit?: number;
}

export interface ApiStocksCodeDeleteRequest {
    code: string;
}

export interface ApiStocksCodeGetRequest {
    code: string;
}

export interface ApiStocksCodePutRequest {
    code: string;
    updateStockRequest: UpdateStockRequest;
}

export interface ApiStocksGetRequest {
    page?: number;
    limit?: number;
    search?: string;
    market?: StockMarket;
    industry?: string;
}

export interface ApiStocksPostRequest {
    createStockRequest: CreateStockRequest;
}

/**
 * 
 */
export class StocksApi extends runtime.BaseAPI {

    /**
     * 获取股票的历史价格和交易数据
     * 获取股票历史数据
     */
    async apiStocksCodeDataGetRaw(requestParameters: ApiStocksCodeDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StockDataListResponse>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling apiStocksCodeDataGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/stocks/{code}/data`;
        urlPath = urlPath.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockDataListResponseFromJSON(jsonValue));
    }

    /**
     * 获取股票的历史价格和交易数据
     * 获取股票历史数据
     */
    async apiStocksCodeDataGet(requestParameters: ApiStocksCodeDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StockDataListResponse> {
        const response = await this.apiStocksCodeDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除指定股票（管理员权限）
     * 删除股票
     */
    async apiStocksCodeDeleteRaw(requestParameters: ApiStocksCodeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling apiStocksCodeDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/stocks/{code}`;
        urlPath = urlPath.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 删除指定股票（管理员权限）
     * 删除股票
     */
    async apiStocksCodeDelete(requestParameters: ApiStocksCodeDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiStocksCodeDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定股票的详细信息
     * 获取股票详情
     */
    async apiStocksCodeGetRaw(requestParameters: ApiStocksCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StockDetailResponse>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling apiStocksCodeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/stocks/{code}`;
        urlPath = urlPath.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockDetailResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定股票的详细信息
     * 获取股票详情
     */
    async apiStocksCodeGet(requestParameters: ApiStocksCodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StockDetailResponse> {
        const response = await this.apiStocksCodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新股票基本信息（管理员权限）
     * 更新股票信息
     */
    async apiStocksCodePutRaw(requestParameters: ApiStocksCodePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StockResponse>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling apiStocksCodePut().'
            );
        }

        if (requestParameters['updateStockRequest'] == null) {
            throw new runtime.RequiredError(
                'updateStockRequest',
                'Required parameter "updateStockRequest" was null or undefined when calling apiStocksCodePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/stocks/{code}`;
        urlPath = urlPath.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStockRequestToJSON(requestParameters['updateStockRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockResponseFromJSON(jsonValue));
    }

    /**
     * 更新股票基本信息（管理员权限）
     * 更新股票信息
     */
    async apiStocksCodePut(requestParameters: ApiStocksCodePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StockResponse> {
        const response = await this.apiStocksCodePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页获取股票列表，支持搜索和筛选
     * 获取股票列表
     */
    async apiStocksGetRaw(requestParameters: ApiStocksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StockListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['market'] != null) {
            queryParameters['market'] = requestParameters['market'];
        }

        if (requestParameters['industry'] != null) {
            queryParameters['industry'] = requestParameters['industry'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/stocks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockListResponseFromJSON(jsonValue));
    }

    /**
     * 分页获取股票列表，支持搜索和筛选
     * 获取股票列表
     */
    async apiStocksGet(requestParameters: ApiStocksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StockListResponse> {
        const response = await this.apiStocksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 添加新股票（管理员权限）
     * 创建股票
     */
    async apiStocksPostRaw(requestParameters: ApiStocksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StockResponse>> {
        if (requestParameters['createStockRequest'] == null) {
            throw new runtime.RequiredError(
                'createStockRequest',
                'Required parameter "createStockRequest" was null or undefined when calling apiStocksPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/stocks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStockRequestToJSON(requestParameters['createStockRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockResponseFromJSON(jsonValue));
    }

    /**
     * 添加新股票（管理员权限）
     * 创建股票
     */
    async apiStocksPost(requestParameters: ApiStocksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StockResponse> {
        const response = await this.apiStocksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
