/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddWatchlistRequest,
  ErrorResponse,
  SuccessResponse,
  UpdateWatchlistRequest,
  WatchlistItemResponse,
  WatchlistResponse,
} from '../models/index';
import {
    AddWatchlistRequestFromJSON,
    AddWatchlistRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateWatchlistRequestFromJSON,
    UpdateWatchlistRequestToJSON,
    WatchlistItemResponseFromJSON,
    WatchlistItemResponseToJSON,
    WatchlistResponseFromJSON,
    WatchlistResponseToJSON,
} from '../models/index';

export interface ApiUsersWatchlistIdDeleteRequest {
    id: number;
}

export interface ApiUsersWatchlistIdGetRequest {
    id: number;
}

export interface ApiUsersWatchlistIdPutRequest {
    id: number;
    updateWatchlistRequest: UpdateWatchlistRequest;
}

export interface ApiUsersWatchlistPostRequest {
    addWatchlistRequest: AddWatchlistRequest;
}

export interface ApiWatchlistDeleteRequest {
    id?: number;
    symbol?: string;
}

export interface ApiWatchlistPostRequest {
    addWatchlistRequest: AddWatchlistRequest;
}

/**
 * 
 */
export class WatchlistApi extends runtime.BaseAPI {

    /**
     * 获取当前用户的自选股列表
     * 获取自选股列表
     */
    async apiUsersWatchlistGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/watchlist`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistResponseFromJSON(jsonValue));
    }

    /**
     * 获取当前用户的自选股列表
     * 获取自选股列表
     */
    async apiUsersWatchlistGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistResponse> {
        const response = await this.apiUsersWatchlistGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 从自选股列表中移除股票
     * 删除自选股
     */
    async apiUsersWatchlistIdDeleteRaw(requestParameters: ApiUsersWatchlistIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersWatchlistIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/watchlist/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 从自选股列表中移除股票
     * 删除自选股
     */
    async apiUsersWatchlistIdDelete(requestParameters: ApiUsersWatchlistIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiUsersWatchlistIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取指定自选股的详细信息
     * 获取自选股详情
     */
    async apiUsersWatchlistIdGetRaw(requestParameters: ApiUsersWatchlistIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistItemResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersWatchlistIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/watchlist/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistItemResponseFromJSON(jsonValue));
    }

    /**
     * 获取指定自选股的详细信息
     * 获取自选股详情
     */
    async apiUsersWatchlistIdGet(requestParameters: ApiUsersWatchlistIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistItemResponse> {
        const response = await this.apiUsersWatchlistIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新自选股备注信息
     * 更新自选股
     */
    async apiUsersWatchlistIdPutRaw(requestParameters: ApiUsersWatchlistIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistItemResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiUsersWatchlistIdPut().'
            );
        }

        if (requestParameters['updateWatchlistRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWatchlistRequest',
                'Required parameter "updateWatchlistRequest" was null or undefined when calling apiUsersWatchlistIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/watchlist/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWatchlistRequestToJSON(requestParameters['updateWatchlistRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistItemResponseFromJSON(jsonValue));
    }

    /**
     * 更新自选股备注信息
     * 更新自选股
     */
    async apiUsersWatchlistIdPut(requestParameters: ApiUsersWatchlistIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistItemResponse> {
        const response = await this.apiUsersWatchlistIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 将股票添加到自选股列表
     * 添加自选股
     */
    async apiUsersWatchlistPostRaw(requestParameters: ApiUsersWatchlistPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistItemResponse>> {
        if (requestParameters['addWatchlistRequest'] == null) {
            throw new runtime.RequiredError(
                'addWatchlistRequest',
                'Required parameter "addWatchlistRequest" was null or undefined when calling apiUsersWatchlistPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/users/watchlist`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddWatchlistRequestToJSON(requestParameters['addWatchlistRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistItemResponseFromJSON(jsonValue));
    }

    /**
     * 将股票添加到自选股列表
     * 添加自选股
     */
    async apiUsersWatchlistPost(requestParameters: ApiUsersWatchlistPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistItemResponse> {
        const response = await this.apiUsersWatchlistPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 从自选股列表中移除股票
     * 删除自选股
     */
    async apiWatchlistDeleteRaw(requestParameters: ApiWatchlistDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/watchlist`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 从自选股列表中移除股票
     * 删除自选股
     */
    async apiWatchlistDelete(requestParameters: ApiWatchlistDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiWatchlistDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取当前用户的自选股列表，包含股票详情和活跃提醒
     * 获取自选股列表
     */
    async apiWatchlistGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/watchlist`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistResponseFromJSON(jsonValue));
    }

    /**
     * 获取当前用户的自选股列表，包含股票详情和活跃提醒
     * 获取自选股列表
     */
    async apiWatchlistGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistResponse> {
        const response = await this.apiWatchlistGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 将股票添加到自选股列表
     * 添加自选股
     */
    async apiWatchlistPostRaw(requestParameters: ApiWatchlistPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WatchlistItemResponse>> {
        if (requestParameters['addWatchlistRequest'] == null) {
            throw new runtime.RequiredError(
                'addWatchlistRequest',
                'Required parameter "addWatchlistRequest" was null or undefined when calling apiWatchlistPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/watchlist`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddWatchlistRequestToJSON(requestParameters['addWatchlistRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WatchlistItemResponseFromJSON(jsonValue));
    }

    /**
     * 将股票添加到自选股列表
     * 添加自选股
     */
    async apiWatchlistPost(requestParameters: ApiWatchlistPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WatchlistItemResponse> {
        const response = await this.apiWatchlistPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
