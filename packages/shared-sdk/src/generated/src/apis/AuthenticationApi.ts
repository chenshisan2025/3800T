/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiAuthWxCallbackPostRequest,
  AuthResponse,
  ErrorResponse,
  LoginRequest,
  MagicLinkRequest,
  RegisterRequest,
  SuccessResponse,
  UserResponse,
} from '../models/index';
import {
    ApiAuthWxCallbackPostRequestFromJSON,
    ApiAuthWxCallbackPostRequestToJSON,
    AuthResponseFromJSON,
    AuthResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    MagicLinkRequestFromJSON,
    MagicLinkRequestToJSON,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models/index';

export interface ApiAuthCallbackGetRequest {
    tokenHash: string;
    type: string;
}

export interface ApiAuthLoginPostRequest {
    loginRequest: LoginRequest;
}

export interface ApiAuthRegisterPostRequest {
    registerRequest: RegisterRequest;
}

export interface ApiAuthStartPostRequest {
    magicLinkRequest: MagicLinkRequest;
}

export interface ApiAuthWxCallbackPostOperationRequest {
    apiAuthWxCallbackPostRequest: ApiAuthWxCallbackPostRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * 验证魔法链接回调
     * 验证魔法链接
     */
    async apiAuthCallbackGetRaw(requestParameters: ApiAuthCallbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['tokenHash'] == null) {
            throw new runtime.RequiredError(
                'tokenHash',
                'Required parameter "tokenHash" was null or undefined when calling apiAuthCallbackGet().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling apiAuthCallbackGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tokenHash'] != null) {
            queryParameters['token_hash'] = requestParameters['tokenHash'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/auth/callback`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * 验证魔法链接回调
     * 验证魔法链接
     */
    async apiAuthCallbackGet(requestParameters: ApiAuthCallbackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.apiAuthCallbackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用户邮箱密码登录
     * 用户登录
     */
    async apiAuthLoginPostRaw(requestParameters: ApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling apiAuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * 用户邮箱密码登录
     * 用户登录
     */
    async apiAuthLoginPost(requestParameters: ApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.apiAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 退出当前用户会话
     * 用户登出
     */
    async apiAuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/auth/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 退出当前用户会话
     * 用户登出
     */
    async apiAuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAuthLogoutPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * 获取已登录用户的详细信息
     * 获取当前用户信息
     */
    async apiAuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/auth/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * 获取已登录用户的详细信息
     * 获取当前用户信息
     */
    async apiAuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.apiAuthMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 创建新用户账户
     * 用户注册
     */
    async apiAuthRegisterPostRaw(requestParameters: ApiAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['registerRequest'] == null) {
            throw new runtime.RequiredError(
                'registerRequest',
                'Required parameter "registerRequest" was null or undefined when calling apiAuthRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters['registerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * 创建新用户账户
     * 用户注册
     */
    async apiAuthRegisterPost(requestParameters: ApiAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.apiAuthRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 发送无密码登录链接到邮箱
     * 发送魔法链接
     */
    async apiAuthStartPostRaw(requestParameters: ApiAuthStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['magicLinkRequest'] == null) {
            throw new runtime.RequiredError(
                'magicLinkRequest',
                'Required parameter "magicLinkRequest" was null or undefined when calling apiAuthStartPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/start`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MagicLinkRequestToJSON(requestParameters['magicLinkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * 发送无密码登录链接到邮箱
     * 发送魔法链接
     */
    async apiAuthStartPost(requestParameters: ApiAuthStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.apiAuthStartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 微信登录回调处理（预留接口）
     * 微信登录回调
     */
    async apiAuthWxCallbackPostRaw(requestParameters: ApiAuthWxCallbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters['apiAuthWxCallbackPostRequest'] == null) {
            throw new runtime.RequiredError(
                'apiAuthWxCallbackPostRequest',
                'Required parameter "apiAuthWxCallbackPostRequest" was null or undefined when calling apiAuthWxCallbackPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/wx/callback`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiAuthWxCallbackPostRequestToJSON(requestParameters['apiAuthWxCallbackPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * 微信登录回调处理（预留接口）
     * 微信登录回调
     */
    async apiAuthWxCallbackPost(requestParameters: ApiAuthWxCallbackPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.apiAuthWxCallbackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
