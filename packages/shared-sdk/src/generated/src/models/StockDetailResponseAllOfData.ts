/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AiReport } from './AiReport';
import {
    AiReportFromJSON,
    AiReportFromJSONTyped,
    AiReportToJSON,
    AiReportToJSONTyped,
} from './AiReport';
import type { StockMarket } from './StockMarket';
import {
    StockMarketFromJSON,
    StockMarketFromJSONTyped,
    StockMarketToJSON,
    StockMarketToJSONTyped,
} from './StockMarket';
import type { StockData } from './StockData';
import {
    StockDataFromJSON,
    StockDataFromJSONTyped,
    StockDataToJSON,
    StockDataToJSONTyped,
} from './StockData';

/**
 * 
 * @export
 * @interface StockDetailResponseAllOfData
 */
export interface StockDetailResponseAllOfData {
    /**
     * 股票 ID
     * @type {number}
     * @memberof StockDetailResponseAllOfData
     */
    id: number;
    /**
     * 股票代码
     * @type {string}
     * @memberof StockDetailResponseAllOfData
     */
    code: string;
    /**
     * 股票名称
     * @type {string}
     * @memberof StockDetailResponseAllOfData
     */
    name: string;
    /**
     * 
     * @type {StockMarket}
     * @memberof StockDetailResponseAllOfData
     */
    market: StockMarket;
    /**
     * 所属行业
     * @type {string}
     * @memberof StockDetailResponseAllOfData
     */
    industry?: string | null;
    /**
     * 当前价格
     * @type {number}
     * @memberof StockDetailResponseAllOfData
     */
    currentPrice?: number | null;
    /**
     * 涨跌幅（百分比）
     * @type {number}
     * @memberof StockDetailResponseAllOfData
     */
    changePercent?: number | null;
    /**
     * 成交量
     * @type {number}
     * @memberof StockDetailResponseAllOfData
     */
    volume?: number | null;
    /**
     * 市值
     * @type {number}
     * @memberof StockDetailResponseAllOfData
     */
    marketCap?: number | null;
    /**
     * 市盈率
     * @type {number}
     * @memberof StockDetailResponseAllOfData
     */
    peRatio?: number | null;
    /**
     * 创建时间
     * @type {Date}
     * @memberof StockDetailResponseAllOfData
     */
    createdAt: Date;
    /**
     * 更新时间
     * @type {Date}
     * @memberof StockDetailResponseAllOfData
     */
    updatedAt: Date;
    /**
     * 最近的股票数据
     * @type {Array<StockData>}
     * @memberof StockDetailResponseAllOfData
     */
    recentData?: Array<StockData>;
    /**
     * 相关 AI 报告
     * @type {Array<AiReport>}
     * @memberof StockDetailResponseAllOfData
     */
    aiReports?: Array<AiReport>;
}



/**
 * Check if a given object implements the StockDetailResponseAllOfData interface.
 */
export function instanceOfStockDetailResponseAllOfData(value: object): value is StockDetailResponseAllOfData {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('market' in value) || value['market'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function StockDetailResponseAllOfDataFromJSON(json: any): StockDetailResponseAllOfData {
    return StockDetailResponseAllOfDataFromJSONTyped(json, false);
}

export function StockDetailResponseAllOfDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): StockDetailResponseAllOfData {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'code': json['code'],
        'name': json['name'],
        'market': StockMarketFromJSON(json['market']),
        'industry': json['industry'] == null ? undefined : json['industry'],
        'currentPrice': json['current_price'] == null ? undefined : json['current_price'],
        'changePercent': json['change_percent'] == null ? undefined : json['change_percent'],
        'volume': json['volume'] == null ? undefined : json['volume'],
        'marketCap': json['market_cap'] == null ? undefined : json['market_cap'],
        'peRatio': json['pe_ratio'] == null ? undefined : json['pe_ratio'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'recentData': json['recent_data'] == null ? undefined : ((json['recent_data'] as Array<any>).map(StockDataFromJSON)),
        'aiReports': json['ai_reports'] == null ? undefined : ((json['ai_reports'] as Array<any>).map(AiReportFromJSON)),
    };
}

export function StockDetailResponseAllOfDataToJSON(json: any): StockDetailResponseAllOfData {
    return StockDetailResponseAllOfDataToJSONTyped(json, false);
}

export function StockDetailResponseAllOfDataToJSONTyped(value?: StockDetailResponseAllOfData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'code': value['code'],
        'name': value['name'],
        'market': StockMarketToJSON(value['market']),
        'industry': value['industry'],
        'current_price': value['currentPrice'],
        'change_percent': value['changePercent'],
        'volume': value['volume'],
        'market_cap': value['marketCap'],
        'pe_ratio': value['peRatio'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'recent_data': value['recentData'] == null ? undefined : ((value['recentData'] as Array<any>).map(StockDataToJSON)),
        'ai_reports': value['aiReports'] == null ? undefined : ((value['aiReports'] as Array<any>).map(AiReportToJSON)),
    };
}

