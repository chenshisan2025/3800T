/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Stock } from './Stock';
import {
    StockFromJSON,
    StockFromJSONTyped,
    StockToJSON,
    StockToJSONTyped,
} from './Stock';

/**
 * 
 * @export
 * @interface PortfolioItem
 */
export interface PortfolioItem {
    /**
     * 持仓 ID
     * @type {number}
     * @memberof PortfolioItem
     */
    id: number;
    /**
     * 投资组合 ID
     * @type {number}
     * @memberof PortfolioItem
     */
    portfolioId: number;
    /**
     * 
     * @type {Stock}
     * @memberof PortfolioItem
     */
    stock: Stock;
    /**
     * 持仓数量
     * @type {number}
     * @memberof PortfolioItem
     */
    quantity: number;
    /**
     * 平均成本
     * @type {number}
     * @memberof PortfolioItem
     */
    averageCost: number;
    /**
     * 当前市值
     * @type {number}
     * @memberof PortfolioItem
     */
    currentValue: number;
    /**
     * 成本价值
     * @type {number}
     * @memberof PortfolioItem
     */
    costValue: number;
    /**
     * 盈亏金额
     * @type {number}
     * @memberof PortfolioItem
     */
    gainLoss: number;
    /**
     * 盈亏百分比
     * @type {number}
     * @memberof PortfolioItem
     */
    gainLossPercent: number;
    /**
     * 添加时间
     * @type {Date}
     * @memberof PortfolioItem
     */
    addedAt: Date;
    /**
     * 更新时间
     * @type {Date}
     * @memberof PortfolioItem
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the PortfolioItem interface.
 */
export function instanceOfPortfolioItem(value: object): value is PortfolioItem {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('portfolioId' in value) || value['portfolioId'] === undefined) return false;
    if (!('stock' in value) || value['stock'] === undefined) return false;
    if (!('quantity' in value) || value['quantity'] === undefined) return false;
    if (!('averageCost' in value) || value['averageCost'] === undefined) return false;
    if (!('currentValue' in value) || value['currentValue'] === undefined) return false;
    if (!('costValue' in value) || value['costValue'] === undefined) return false;
    if (!('gainLoss' in value) || value['gainLoss'] === undefined) return false;
    if (!('gainLossPercent' in value) || value['gainLossPercent'] === undefined) return false;
    if (!('addedAt' in value) || value['addedAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function PortfolioItemFromJSON(json: any): PortfolioItem {
    return PortfolioItemFromJSONTyped(json, false);
}

export function PortfolioItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortfolioItem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'portfolioId': json['portfolio_id'],
        'stock': StockFromJSON(json['stock']),
        'quantity': json['quantity'],
        'averageCost': json['average_cost'],
        'currentValue': json['current_value'],
        'costValue': json['cost_value'],
        'gainLoss': json['gain_loss'],
        'gainLossPercent': json['gain_loss_percent'],
        'addedAt': (new Date(json['added_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function PortfolioItemToJSON(json: any): PortfolioItem {
    return PortfolioItemToJSONTyped(json, false);
}

export function PortfolioItemToJSONTyped(value?: PortfolioItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'portfolio_id': value['portfolioId'],
        'stock': StockToJSON(value['stock']),
        'quantity': value['quantity'],
        'average_cost': value['averageCost'],
        'current_value': value['currentValue'],
        'cost_value': value['costValue'],
        'gain_loss': value['gainLoss'],
        'gain_loss_percent': value['gainLossPercent'],
        'added_at': ((value['addedAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

