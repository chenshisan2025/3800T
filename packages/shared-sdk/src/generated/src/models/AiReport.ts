/* tslint:disable */
/* eslint-disable */
/**
 * 古灵通股票投资平台 API
 * 古灵通股票投资平台的 RESTful API 服务  ## 功能特性 - 用户认证与授权 - 股票数据查询 - 自选股管理 - 投资组合管理 - AI 投资报告 - 实时行情数据  ## 认证方式 使用 Bearer Token 进行身份验证，通过 Supabase Auth 获取访问令牌。  ## 响应格式 所有 API 响应都遵循统一的格式： ```json {   \"success\": true,   \"data\": {},   \"message\": \"操作成功\",   \"timestamp\": \"2024-01-01T00:00:00.000Z\" } ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gulingtong.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReportType } from './ReportType';
import {
    ReportTypeFromJSON,
    ReportTypeFromJSONTyped,
    ReportTypeToJSON,
    ReportTypeToJSONTyped,
} from './ReportType';
import type { Stock } from './Stock';
import {
    StockFromJSON,
    StockFromJSONTyped,
    StockToJSON,
    StockToJSONTyped,
} from './Stock';

/**
 * 
 * @export
 * @interface AiReport
 */
export interface AiReport {
    /**
     * 报告 ID
     * @type {number}
     * @memberof AiReport
     */
    id: number;
    /**
     * 股票 ID
     * @type {number}
     * @memberof AiReport
     */
    stockId: number;
    /**
     * 
     * @type {Stock}
     * @memberof AiReport
     */
    stock: Stock;
    /**
     * 
     * @type {ReportType}
     * @memberof AiReport
     */
    reportType: ReportType;
    /**
     * 报告标题
     * @type {string}
     * @memberof AiReport
     */
    title: string;
    /**
     * 报告内容
     * @type {string}
     * @memberof AiReport
     */
    content: string;
    /**
     * 报告摘要
     * @type {string}
     * @memberof AiReport
     */
    summary?: string | null;
    /**
     * 评分（0-100）
     * @type {number}
     * @memberof AiReport
     */
    score?: number | null;
    /**
     * 投资建议
     * @type {string}
     * @memberof AiReport
     */
    recommendation?: AiReportRecommendationEnum | null;
    /**
     * 置信度（0-1）
     * @type {number}
     * @memberof AiReport
     */
    confidence?: number | null;
    /**
     * 创建时间
     * @type {Date}
     * @memberof AiReport
     */
    createdAt: Date;
    /**
     * 更新时间
     * @type {Date}
     * @memberof AiReport
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const AiReportRecommendationEnum = {
    Buy: 'buy',
    Hold: 'hold',
    Sell: 'sell'
} as const;
export type AiReportRecommendationEnum = typeof AiReportRecommendationEnum[keyof typeof AiReportRecommendationEnum];


/**
 * Check if a given object implements the AiReport interface.
 */
export function instanceOfAiReport(value: object): value is AiReport {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('stockId' in value) || value['stockId'] === undefined) return false;
    if (!('stock' in value) || value['stock'] === undefined) return false;
    if (!('reportType' in value) || value['reportType'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function AiReportFromJSON(json: any): AiReport {
    return AiReportFromJSONTyped(json, false);
}

export function AiReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): AiReport {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'stockId': json['stock_id'],
        'stock': StockFromJSON(json['stock']),
        'reportType': ReportTypeFromJSON(json['report_type']),
        'title': json['title'],
        'content': json['content'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'score': json['score'] == null ? undefined : json['score'],
        'recommendation': json['recommendation'] == null ? undefined : json['recommendation'],
        'confidence': json['confidence'] == null ? undefined : json['confidence'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function AiReportToJSON(json: any): AiReport {
    return AiReportToJSONTyped(json, false);
}

export function AiReportToJSONTyped(value?: AiReport | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'stock_id': value['stockId'],
        'stock': StockToJSON(value['stock']),
        'report_type': ReportTypeToJSON(value['reportType']),
        'title': value['title'],
        'content': value['content'],
        'summary': value['summary'],
        'score': value['score'],
        'recommendation': value['recommendation'],
        'confidence': value['confidence'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

