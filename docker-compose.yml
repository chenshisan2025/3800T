version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: gulingtong-postgres
    environment:
      POSTGRES_DB: gulingtong
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/api/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gulingtong-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: gulingtong-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gulingtong-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API 服务
  api:
    build:
      context: .
      target: api
    container_name: gulingtong-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/gulingtong
      - REDIS_URL=redis://redis:6379
      - PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gulingtong-network
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 管理后台
  admin:
    build:
      context: .
      target: admin
    container_name: gulingtong-admin
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://api:3001
      - API_BASE_URL=http://api:3001
    depends_on:
      - api
    networks:
      - gulingtong-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: gulingtong-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - admin
      - api
    networks:
      - gulingtong-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  gulingtong-network:
    driver: bridge

# 开发环境配置
---
# docker-compose.dev.yml
version: '3.8'

services:
  # 开发环境数据库
  postgres-dev:
    image: postgres:15-alpine
    container_name: gulingtong-postgres-dev
    environment:
      POSTGRES_DB: gulingtong_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - gulingtong-dev-network

  # 开发环境 Redis
  redis-dev:
    image: redis:7-alpine
    container_name: gulingtong-redis-dev
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - gulingtong-dev-network

  # 开发环境应用
  app-dev:
    build:
      context: .
      target: development
    container_name: gulingtong-app-dev
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres-dev:5432/gulingtong_dev
      - REDIS_URL=redis://redis-dev:6379
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - gulingtong-dev-network
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/admin/node_modules
      - /app/services/api/node_modules
      - /app/packages/shared-sdk/node_modules
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  gulingtong-dev-network:
    driver: bridge