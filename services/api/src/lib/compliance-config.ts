/**
 * 合规配置数据访问层
 * 处理合规配置的存储、检索和管理
 */

import {
  ComplianceGlobalConfig,
  DisclaimerConfig,
  DataSourceConfig,
  PageComplianceConfig,
  ComplianceConfigData,
  DisclaimerType,
  DataSourceType,
  SupportedLanguage,
} from '../types/compliance';

// ============================================================================
// 默认配置数据
// ============================================================================

/** 默认全局配置 */
const DEFAULT_GLOBAL_CONFIG: ComplianceGlobalConfig = {
  disclaimerEnabled: true,
  dataSourceHintEnabled: true,
  version: '1.0.0',
  lastUpdated: new Date().toISOString(),
};

/** 默认免责声明配置 */
const DEFAULT_DISCLAIMER_CONFIGS: DisclaimerConfig[] = [
  {
    type: 'investment',
    title: {
      zh: '投资风险提示',
      en: 'Investment Risk Warning',
    },
    content: {
      zh: '投资有风险，入市需谨慎。本平台提供的信息仅供参考，不构成投资建议。',
      en: 'Investment involves risks. Please invest cautiously. The information provided on this platform is for reference only and does not constitute investment advice.',
    },
    icon: 'warning',
    position: 'bottom',
    theme: 'warning',
    enabled: true,
    priority: 100,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    type: 'ai',
    title: {
      zh: 'AI分析声明',
      en: 'AI Analysis Disclaimer',
    },
    content: {
      zh: '本分析由AI生成，仅供参考。AI分析可能存在偏差，请结合其他信息综合判断。',
      en: 'This analysis is generated by AI for reference only. AI analysis may have biases, please combine with other information for comprehensive judgment.',
    },
    icon: 'robot',
    position: 'bottom',
    theme: 'info',
    enabled: true,
    priority: 90,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    type: 'data',
    title: {
      zh: '数据声明',
      en: 'Data Disclaimer',
    },
    content: {
      zh: '数据来源于第三方，可能存在延迟或错误。请以官方数据为准。',
      en: 'Data is sourced from third parties and may be delayed or contain errors. Please refer to official data.',
    },
    icon: 'database',
    position: 'bottom',
    theme: 'default',
    enabled: true,
    priority: 80,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    type: 'general',
    title: {
      zh: '一般声明',
      en: 'General Disclaimer',
    },
    content: {
      zh: '本平台内容仅供参考，不构成任何形式的建议或承诺。',
      en: 'The content on this platform is for reference only and does not constitute any form of advice or commitment.',
    },
    icon: 'info',
    position: 'bottom',
    theme: 'default',
    enabled: true,
    priority: 70,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

/** 默认数据源配置 */
const DEFAULT_DATA_SOURCE_CONFIGS: DataSourceConfig[] = [
  {
    type: 'realtime',
    title: {
      zh: '实时数据',
      en: 'Real-time Data',
    },
    description: {
      zh: '实时市场数据',
      en: 'Real-time market data',
    },
    providers: [
      {
        name: { zh: '新浪财经', en: 'Sina Finance' },
        code: 'sina',
        website: 'https://finance.sina.com.cn',
        delay: 0,
      },
    ],
    showDelay: true,
    position: 'bottom',
    theme: 'success',
    enabled: true,
    priority: 100,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    type: 'delayed',
    title: {
      zh: '延迟数据',
      en: 'Delayed Data',
    },
    description: {
      zh: '延迟15分钟的市场数据',
      en: '15-minute delayed market data',
    },
    providers: [
      {
        name: { zh: '腾讯财经', en: 'Tencent Finance' },
        code: 'tencent',
        website: 'https://finance.qq.com',
        delay: 15,
      },
    ],
    showDelay: true,
    position: 'bottom',
    theme: 'warning',
    enabled: true,
    priority: 90,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    type: 'historical',
    title: {
      zh: '历史数据',
      en: 'Historical Data',
    },
    description: {
      zh: '历史市场数据',
      en: 'Historical market data',
    },
    providers: [
      {
        name: { zh: '网易财经', en: 'NetEase Finance' },
        code: 'netease',
        website: 'https://money.163.com',
        delay: 0,
      },
    ],
    showDelay: false,
    position: 'bottom',
    theme: 'default',
    enabled: true,
    priority: 80,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
  {
    type: 'estimated',
    title: {
      zh: '估算数据',
      en: 'Estimated Data',
    },
    description: {
      zh: '基于算法估算的数据',
      en: 'Algorithm-based estimated data',
    },
    providers: [
      {
        name: { zh: '平台算法', en: 'Platform Algorithm' },
        code: 'platform',
        delay: 0,
      },
    ],
    showDelay: false,
    position: 'bottom',
    theme: 'info',
    enabled: true,
    priority: 70,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
];

/** 默认页面配置 */
const DEFAULT_PAGE_CONFIGS: PageComplianceConfig[] = [
  {
    pageId: 'stock-detail',
    pageName: {
      zh: '个股详情',
      en: 'Stock Detail',
    },
    enabledDisclaimers: ['investment', 'data'],
    enabledDataSources: ['realtime', 'delayed'],
    overrideGlobal: false,
  },
  {
    pageId: 'ai-panel',
    pageName: {
      zh: 'AI面板',
      en: 'AI Panel',
    },
    enabledDisclaimers: ['ai', 'data'],
    enabledDataSources: ['realtime', 'estimated'],
    overrideGlobal: false,
  },
];

// ============================================================================
// 数据访问类
// ============================================================================

/**
 * 合规配置管理器
 * 负责配置的存储、检索和管理
 */
export class ComplianceConfigManager {
  private static instance: ComplianceConfigManager;
  private globalConfig: ComplianceGlobalConfig;
  private disclaimerConfigs: DisclaimerConfig[];
  private dataSourceConfigs: DataSourceConfig[];
  private pageConfigs: PageComplianceConfig[];

  private constructor() {
    // 初始化默认配置
    this.globalConfig = { ...DEFAULT_GLOBAL_CONFIG };
    this.disclaimerConfigs = [...DEFAULT_DISCLAIMER_CONFIGS];
    this.dataSourceConfigs = [...DEFAULT_DATA_SOURCE_CONFIGS];
    this.pageConfigs = [...DEFAULT_PAGE_CONFIGS];
  }

  /**
   * 获取配置管理器实例（单例模式）
   */
  public static getInstance(): ComplianceConfigManager {
    if (!ComplianceConfigManager.instance) {
      ComplianceConfigManager.instance = new ComplianceConfigManager();
    }
    return ComplianceConfigManager.instance;
  }

  /**
   * 获取完整配置数据
   */
  public getConfigData(): ComplianceConfigData {
    return {
      globalConfig: { ...this.globalConfig },
      disclaimerConfigs: [...this.disclaimerConfigs],
      dataSourceConfigs: [...this.dataSourceConfigs],
      pageConfigs: [...this.pageConfigs],
    };
  }

  /**
   * 获取全局配置
   */
  public getGlobalConfig(): ComplianceGlobalConfig {
    return { ...this.globalConfig };
  }

  /**
   * 更新全局配置
   */
  public updateGlobalConfig(config: Partial<ComplianceGlobalConfig>): void {
    this.globalConfig = {
      ...this.globalConfig,
      ...config,
      lastUpdated: new Date().toISOString(),
    };
  }

  /**
   * 获取免责声明配置
   */
  public getDisclaimerConfigs(type?: DisclaimerType): DisclaimerConfig[] {
    if (type) {
      return this.disclaimerConfigs.filter(config => config.type === type);
    }
    return [...this.disclaimerConfigs];
  }

  /**
   * 更新免责声明配置
   */
  public updateDisclaimerConfigs(configs: DisclaimerConfig[]): void {
    this.disclaimerConfigs = configs.map(config => ({
      ...config,
      updatedAt: new Date().toISOString(),
    }));
  }

  /**
   * 获取数据源配置
   */
  public getDataSourceConfigs(type?: DataSourceType): DataSourceConfig[] {
    if (type) {
      return this.dataSourceConfigs.filter(config => config.type === type);
    }
    return [...this.dataSourceConfigs];
  }

  /**
   * 更新数据源配置
   */
  public updateDataSourceConfigs(configs: DataSourceConfig[]): void {
    this.dataSourceConfigs = configs.map(config => ({
      ...config,
      updatedAt: new Date().toISOString(),
    }));
  }

  /**
   * 获取页面配置
   */
  public getPageConfigs(pageId?: string): PageComplianceConfig[] {
    if (pageId) {
      return this.pageConfigs.filter(config => config.pageId === pageId);
    }
    return [...this.pageConfigs];
  }

  /**
   * 更新页面配置
   */
  public updatePageConfigs(configs: PageComplianceConfig[]): void {
    this.pageConfigs = [...configs];
  }

  /**
   * 检查全局开关状态
   */
  public isComplianceEnabled(
    component: 'disclaimer' | 'dataSourceHint'
  ): boolean {
    if (component === 'disclaimer') {
      return this.globalConfig.disclaimerEnabled;
    }
    return this.globalConfig.dataSourceHintEnabled;
  }

  /**
   * 根据页面ID和语言获取配置
   */
  public getConfigByPage(
    pageId?: string,
    language: SupportedLanguage = 'zh'
  ): ComplianceConfigData {
    const baseConfig = this.getConfigData();

    // 如果指定了页面ID，过滤相关配置
    if (pageId) {
      const pageConfig = this.pageConfigs.find(
        config => config.pageId === pageId
      );
      if (pageConfig) {
        // 根据页面配置过滤免责声明和数据源
        baseConfig.disclaimerConfigs = baseConfig.disclaimerConfigs.filter(
          config => pageConfig.enabledDisclaimers.includes(config.type)
        );
        baseConfig.dataSourceConfigs = baseConfig.dataSourceConfigs.filter(
          config => pageConfig.enabledDataSources.includes(config.type)
        );
      }
    }

    return baseConfig;
  }
}

// ============================================================================
// 导出工具函数
// ============================================================================

/**
 * 获取配置管理器实例
 */
export const getComplianceConfigManager = () =>
  ComplianceConfigManager.getInstance();

/**
 * 检查全局开关状态
 */
export const isComplianceEnabled = (
  component: 'disclaimer' | 'dataSourceHint'
): boolean => {
  return getComplianceConfigManager().isComplianceEnabled(component);
};

/**
 * 获取特定类型的免责声明配置
 */
export const getDisclaimerConfig = (
  type: DisclaimerType
): DisclaimerConfig | undefined => {
  const configs = getComplianceConfigManager().getDisclaimerConfigs(type);
  return configs.find(config => config.enabled);
};

/**
 * 获取特定类型的数据源配置
 */
export const getDataSourceConfig = (
  type: DataSourceType
): DataSourceConfig | undefined => {
  const configs = getComplianceConfigManager().getDataSourceConfigs(type);
  return configs.find(config => config.enabled);
};
